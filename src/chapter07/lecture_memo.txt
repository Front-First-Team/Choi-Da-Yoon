=========== 섹션 07. Hooks
React version16.8에서 새롭게 등장한 개념이나 지금은 모두 hook을 사용한다. 
Hook 이란? 
    Component 는 함수컴포넌트 / 클래스 컴포넌트가 있다. 함수 컴포넌트는 Class Component에 비해 코드가 간결해서 따로 state를 조정할 수 없었다. 
    그래서 등장한게 Hook이다. 
    원해진 시점에 정해진 함수를 수행하게끔 만들어진것이며, 
    hook의 규칙 중 하나는 앞에 use가 붙는다는 것이다. 
useState() : state를 사용하기 위한 Hook
    * 변수 각각에 대해 set함수가 따로 존재한다. 
    const [변수명, set함수명] = useState(초기값);   
    초기값 : 파라미터로 선언할 것 (생성자에서 setState하는 것과 동일)
        (ex)
        function Counter(props){
            const [count, setCount] = useState(0);
            return (
                <div>
                    <p>총 {count}번 클릭했습니다</p>
                    <button onClick
                </div>
            )
        }
useEffect() : sideEffect를 수행하기 위한 Hook
    리액트에서 얘기하는 side Effect는 효과를 의미한다. 이름이 이렇게 지어진 배경은 이펙트가 다른 컴포넌트에 영향을 미칠 수 있으며, 렌더링 중에는 완료될 수 없기 때문. 
    그래서 side로 진행되게끔 리액트의 함수 컴포넌트에서 side effect를 실행할 수 있게 해주는 hook
    componentDidMount(), componentWillUnmount(), componentDidUpdate() 함수를 하나로 합친거라고 보면 된다. 
    
    useEffect(이펙트 함수, 의존성 배열);
    의존성 배열이 하나라도 변경하면 바로 이펙트함수가 실행됨. 
    기본적으로 effect함수는 처음으로 컴포넌트가 렌더링된 초기 시점과 update로 인한 재렌더링 때에 실행된다. 
    의존성 배열을 생략하면 업데이트 될 때마다 재렌더링됨. 

useMemo() : Memoized value를 리턴하는 hook
    memoization : 최적화를 위해 사용되는 개념. 한번 호출된 결과를 저장해뒀다가 그 값을 바로 반환. 컴퓨터 자원을 적게쓸 수 있음. 
    * 렌더링이 진행되는 동안 실행된다. 그래서 렌더링이 일어나는 동안 실행되서는 안되는 함수를 넣어서는 안된다. 
    그래서 userEffect()에서 사용되어야할 sideEffect라는 것이 있다. 서버에서 데이터를 받아오거나 수동으로 작업하는 것들은 useEffect() 훅을 사용해야한다. 

    형태 : const memoizedValue = useMemo(
        ()=>{
            return create함수()
        }, [의존성 변수 배열] // 의존성 배열에 있는 변수가 변했을 경우에만 새로 create함수를 호출하여 결과값을 반환하고 그렇지 않으면 기존 return값을 리턴한다. 그래서 불필요한 렌더링을 줄일 수 있다. 
        // 만약 의존성 배열을 넣지 않을경우 매 렌더링마다 함수가 실행된다. 
        // 그래서 의존성 배열을 넣지 않는것은 의미가 없음. 빈배열을 전달할 경우에는 컴포넌트 마운트 시에만 호출됨. 그런데 보통은 변경된 값을 트래킹할 때 쓰기 때문에 반드시 의미있는 배열을 넣어줘야함. 
    )
    (ex)
    const memoizedValue = useMemo(
        () => {
            reutrn computeExpensiveValue(의존성변수1, 의존성변수2);
        },
        [의존성 변수1, 의존성 변수2] 
    );

    의존성배열을 넣지 않으면 매 렌더링마다 함수가 실행됨. 
    의존성배열이 빈 배열일 경우, 컴포넌트 마운트 시에만 호출됨. 

useCallback() : useMemo() Hook과 유사하지만 값이 아닌 함수를 변환
    => 의존성 배열의 값이 바뀌는 경우에만 함수를 새로 정의해서 리턴해주는 것
    ChildComponent에 useCallback훅을 사용하지 않는 경우에는 (직접 함수를 정의하고 그것을 속성으로 넣는경우) 부모 컴포넌트가 랜더링될 때마다 하위 컴포넌트도 재렌더링되는데, useCallback을 사용하면 하위 배열이 변경될 때만 변경된다. 
    => 의존성 배열이 빈배열이어도 함수가 마운트될 때만 호출되기 때문에 불필요한 렌더링이 발생하지 않음. 

    const memoizedCallback = useCallback(()=>{
        함수(의존성변수1, 의존성 변수2); // 이 함수를 콜백이라고 부른다
    },
    [의존성 변수1, 의존성 변수2]);

    아래 두 함수는 동일한 기능을 한다. 
    *useCallback(함수, 의존성배열);
    *useMemo(()=> 함수, 의존성배열);



useRef() : Reference(특정 컴포넌트에 접근할 수 있는 객체)를 반환
    리액트에서 레퍼런스란? 특정 컴포넌트에 접근할 수 있는 객체, 그리고 이 객체를 반환한다. 변경가능한 current라는 속성을 가진 하나의 상자라고 보면 된다. 
    refObject.current : 현재 참조하고 있는 Element의미

    (ex)
    const inputElem = useRef(null);
    >> useRef훅이 inputElem이라는 컴포넌트에 접근하고 있다. (결과로 반환되는 거니까)
    const onButtonClick = () => {
        inputElem.current.focus(); => 실제 엘리먼트에 접근하여  focus함수를 호출한다. 
    }
    

    * <div ref={myRef}/>
    ref 속성 : 리액트에서는 노드가 변경될 때마다 ref의 현재 속성에 현재 해당되는 dom노드를 저장한다. 클래스의 인스턴스를 사용하는 것과 비슷하게 여러 객체를 사용할 수 있다. 
    useRef()는 렌더링할 때마다 같은 레퍼런스 값을 반환한다. 그리고 useRef() Hook은 내부의 데이터가 변경되었을 때 별도로 알리지 않는다. 

Callback Ref를 사용해서 변경된 여부를 알람을 받는다. React는 다른 노드에 Callback를 실행하게 된다. 

=========== 섹션 07. Custom Hook
Custom Hook : 이름이 use로 시작하고 내부에서 다른 Hook을 호출하는 하나의 자바스크립트 함수
Hook 츄칙 : 
1. Hook은 무조건 최상위 레벨에서만 호출돼야한다. 
2. 리액트함수 컴포넌트에서만 Hook을 호출해야한다. 
각 Custom Hook은 독립적 

리액트에서 만든 리액트 함수외에 필요하다면 hook함수를 직접 만들어서 쓸 수 있다. 
각 커스텀 훅도 서로 완전 독립적이다. 서로 호출가능하고 여러번 호출되 가능한다. 

(예시)
const userList = [
    {id: 1, name : "Inje"}, 
    {id : 2, name : "Mike"},
    {id : 3, name : "Steve"},
];

function ChatUserSelector(props){
    // const [변수명, set함수명] = useState(초기값);   
    const [userId, setUserId] = useState(1) //userId를 저장하기 위해 useState()사용
    const isUserOnline = useUserStatus(userId); //setUserId함수를 통해 userId가 변경될 때마다 useUserStates훅은 이전에 선택된 사용자의 구독을 취소하고 새로 선택된 사용자의 online여부를 구독하게 된다. 

    return {
        <>
        <Circle color={isUserOnline? 'green' : 'red'} />
        <select 
            value ={userId}
            onChange = {even => setUserId(Number(event.target.value))}
        >
            {userList.map(user => (
                <option key={user.id} value={user.id}> {user.name} </option>
            ))}
        </select>
        </>
    }
}
