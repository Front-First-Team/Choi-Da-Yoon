========== 섹션 08. 이벤트
Event 정의 : '사건'을 의미한다. 
DOM의 Event
    <button onclick="activate()">Activate</button>
React의 Event
    <button onClick={activate}>Activate</button>

EventHandler (EventListener) 
React에서 함수를 ()없이 사용하려면 bind를 해줘야한다. 
bind를 하는 이유 : javascript에서는 기본적으로 클래스 안의 함수들이 bound되지 않음.
그래서 bound하지 않으면 global scope에서 불러오는데, 
global scope에서 불러오면 undefined가 뜰 수 밖에 없음. 


class Toggle extends React.Component {
    constructor(props){
        super(props);
        this.state = {isToggleOn: true};
        // callback에서 `this`를 사용하기 위해서는 바인딩을 필수적으로 해야한다. 
        this.handleClick = this.handleClick.bind(this);
    }

    handleClick(){
        this.setState(prevState => ({
            isToggleOn : !prevState.isToggleOn
        }));
    }

    render(){
        return (
            <button onClick={this.handleClick}>
                {this.state.isToggleOn? '켜짐' : '꺼짐'}
            </button>
        )
    }
}


혹은

class MyButton extends React.Component{
    // Class fields Syntax라는 것을 사용
    handleClick = () => {
        console.log('this is:', this); 
    }

    render(){
        // 혹은 arrow function() 사용 but 권장하지 않음. 
        return (
            <button onClick={this.handleClick}> 클릭 </button>
        )
    }
}

EventHandler에 argument를 넘겨주기 (Class Component)
// 1. arrow function
<button onClick = {(event)=> this.deleteItem(id, event)}>삭제하기</button>
// 2. bind
<button onClick = {this.deleteItem.bind(this, id)}>삭제하기</button>
(Function Component)
function MyButton(props){
    const handleDelete = (id, event)=>{
        console.log(id, event.target);
    }
    return (
        <button onClick={(event) => handleDelete(1, event)}>
            삭제하기
        </button>
    )
}