Conditional Rendering(조건부 렌더링)
의미 : 특정 조건에 따라 렌더링이 달라지는것
==================================================
Truthy / Falsy
True/False는 아니지만 True/False로 여겨지는 값
<Truthy>
true
{} (empty object)
[] (empty array)
42 (number, not zero)
"0", "false" (string, not empty)
<Falsy>
false
0, -0 (zero, minus zero)
0n (BigInt Zero)
'', "", `` (empty string)
null, 
undefined, 
NaN
==================================================
Element Variables (엘리먼트 변수) : 엘리먼트를 변수처럼 다루고 싶을 때
엘리먼트란 ? 
화면에 표시할 내용과 관련된 정보를 가진 js 객체
==================================================
Inline Conditions (인라인 조건)
조건문을 코드 안에 집어넣는것
inline if / inline if else

**IF문의 경우 && 라는 논리연산자를 사용 
true&&expression -> expression
false&&expression -> false
기 때문에 앞의 조건이 true여야 뒷 조건이 렌더링 된다. 

(ex)
function Mailbox(props){
    const unreadMessages = props.unreadMessages;

    return (
        <div>
            <h1>안녕하세요</h1>
            {unreadMessages.length > 0 &&
                <h2>
                    현재 {unreadMessages.lenth}개의 읽지 않은 메시지가 있습니다.
                </h2>
            }
        </div>
    )
}

** 주의해야하는 점 : 앞 조건이 false라고 해서 아무런 값이 출력되지 않는게 아니다. 
const count = 0;
return (
    <div>
        {count && <h1>현재 카운트 : {count} </h1>}
    </div>
)
일 경우 return 0이 될것이다. 

If-Else 는 삼항연산자를 사용한다. 
=====================
렌더링 막기 => return null일경우 아무것도 출력하지 않음

function WarningBanner(props){
    if(!props.warning){ 
        return null;
    }

    return (
        <div>경고</div>
    )
}

function MainPage(props){
    cons [showWarning, setShowWarning] = useState(false);

    const handleToggleClick = () =>{
        setShowWarning(prevShowWarninig => !prevShowWarninig);
    }

    return (
        <div>
            <WarningBanner warning = {showWarning}/> // => WarningBanner(warning=showWarning) 으로 사용되는 것이다. 
            <button onClick={handleToggleClick}>
                {showWarning ? '감추기' : '보이기'}
            </button>
        </div>
    )
}